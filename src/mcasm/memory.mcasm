extern std:heap/expand:

// 每个内存块前，有一个元数据头
// struct {
//     int blockSize;
// }
// 最高位存储是否可用（可用为0 (正数)，占用为1 (负数)），剩下的位存储块大小
export std:_internal/init_malloc:
    // 放置元数据头
    mov [0], shp
    ret

// void *malloc(int size)
export std:malloc:
    mov rax, 0
    rle r0, 0

loop:
    mov t0, [rax]
    jg t0, r0, found
    sub rax, t0
    jge rax, shp, oom
    jmp loop
oom:
    push r0
    mov r0, shp
    call std:heap/expand

    mov t0, r0
    mov [rax], t0

    pop r0
    jg t0, r0, found
    add rax, t0
    jge rax, shp, oom
    jmp loop
found:
    add r0, 1
    je t0, r0, to_ret

    sub t0, r0
    mov [rax + r0], t0

to_ret:
    mul r0, -1
    mov [rax], r0
    add rax, 1
    ret


// void free(void *ptr)
export std:free:
    rle r0, 0
    // 暂时不考虑合并块
    mul [r0 - 1], -1  // 最高位取反
    ret

// void memset(int *ptr, int value, int size)
export std:memset:
    rle r2, 0

    add r2, r0
memset_loop:
    mov [r0], r1
    add r0, 1
    re r0, r2

    mov [r0], r1
    add r0, 1
    re r0, r2

    mov [r0], r1
    add r0, 1
    re r0, r2

    mov [r0], r1
    add r0, 1
    re r0, r2

    jmp memset_loop
